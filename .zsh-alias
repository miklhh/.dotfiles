#
# Configuration is very miniscule but it does the job both for faint tty sessions and in interactive colored terminal
# emulators. If Powerlevel10k is available it is sourced. If not fallback prompt is available.
#
# Author: Mikael Henriksson (www.github.com/miklhh)
#


# Alias Vim -> NeoVim
command -v "nvim" 1>/dev/null 2>&1 && alias vim='nvim' || echo "[ .zsh-alias:${LINENO} ]: Warning: 'nvim' not in \${PATH}"

# Settings for ls
if [ $(uname -s) = "Darwin" ]
then
    if command -v gls 1>/dev/null 2>&1; then
        # MacOS machine with GNU coreutils installed, use GNU ls
        alias ls='gls --color=auto --group-directories-first --classify --human-readable'
    else
        # MacOS machine with BSD ls
        echo "[ .zsh-alias:${LINENO} ]: Warning: 'GNU coreutils' not installed, using 'BSD ls'"
        alias ls='ls -G'
    fi
else
    # Any other machine (probably Linux).
    alias ls='ls --color=auto --group-directories-first --classify --human-readable'
fi
alias l='ls -l'
alias ll='ls -l -a'

# Open Vim in Tmux function
function _VIM_IN_TMUX() {
    if command -v "tmux" 1>/dev/null 2>&1; then
        if [ -z "${TMUX}" ]; then
            tmux new-session -d
            tmux send-keys "nvim $@" Enter
            tmux attach
        else
            nvim "$@"
        fi
    else
        nvim "$@"
    fi
}

# Command line quickies
alias t='tmux'
alias ta='tmux attach -t'
alias g='git'
alias vim='_VIM_IN_TMUX'
alias v='_VIM_IN_TMUX'

# Fast Tmux current directory changes, based on working directories of adjacent Tmux panes. Example usage: when in any
# Tmux pane, use 'cdl' on the Zsh command line to change the current working directory to that of the working directory
# of the Tmux pane located left of the active pane.
alias cdl='cd $(tmux display-message -p -F "#{pane_current_path}" -t "{left-of}"  || echo ".")'
alias cdr='cd $(tmux display-message -p -F "#{pane_current_path}" -t "{right-of}" || ehco ".")'
alias cdu='cd $(tmux display-message -p -F "#{pane_current_path}" -t "{up-of}"    || echo ".")'
alias cdd='cd $(tmux display-message -p -F "#{pane_current_path}" -t "{down-of}"  || echo ".")'

#
# Change directory FZF style
# * Command 'c'  : Use FZF to change directory forward, from the current directory
# * Command 'C'  : Use FZF to change directory backward, from the current directory
# * Command 'ch' : Use FZF to change directory forward, from $USERÂ´s home directory
#
if command -v fzf 1>/dev/null 2>&1; then
    _TREE_PREVIEW='tree --dirsfirst -L 1 -C {} | head -200'
    alias _FZF_CD_PREVIEW="fzf --height=50% --reverse --border --info=inline --preview '${_TREE_PREVIEW}'"
    function _GENERATE_BACKWARD_DIR_LIST() {
        local PARAM="$1"
        local REM="$(pwd)"
        local PART=""
        if [ "$PARAM" = "--exclude" ]; then
            while [ ! -z "$REM" ]; do
                echo "$PART"
                IFS="/" read CUR REM <<< "$REM"
                local PART="${PART}${CUR}/"
            done
        else
            while [ ! -z "$REM" ]; do
                IFS="/" read CUR REM <<< "$REM"
                local PART="${PART}${CUR}/"
                echo "$PART"
            done
        fi
    }
    function _BFS_DIR_SEARCH() {
        bfs "$1" -type d -exclude -name .git 2>/dev/null | sed "s|\./||g"
    }
    function _RFS_DIR_SEARCH() {
        rfs -p "$1" -i .git 2>/dev/null | sed "s|\./||g"
    }
    function _FIND_DIR_SEARCH() {
        find . -type d 2>/dev/null | sed "s|\./||g"
    }
    if command -v bfs 1>/dev/null 2>&1; then
        # Prio 1: Breadth first directory search using 'bfs', has top priority of the directory search utilities as it
        #         tends to find the desiered directory the fastest.
        alias _DIR_SEARCH='_BFS_DIR_SEARCH'
    elif command -v rfs 1>/dev/null 2>&1; then
        # Prio 2: Directory search using the Rust first search utility. Not as good as 'bfs', but it supports
        #         multithreaded depth first search, so it has the potential to perform better than the find utility.
        alias _DIR_SEARCH='_RFS_DIR_SEARCH'
    else
        # Prio 3 (fallback): Directory search using the common 'find' utility. Slow and ugly, but gets the job done.
        alias _DIR_SEARCH='_FIND_DIR_SEARCH'
    fi
    alias  C='cd "$(_GENERATE_BACKWARD_DIR_LIST --exclude | _FZF_CD_PREVIEW --tac || echo .)"'
    alias  c='cd "$(_DIR_SEARCH . | _FZF_CD_PREVIEW || echo .)"'
    alias ch='cd "$(_DIR_SEARCH ~ | _FZF_CD_PREVIEW || echo .)"'
else
    echo "[ .zsh-alias:${LINENO} ]: Warning: 'fzf' not in \${PATH}"
    alias  c="echo \"[ .zsh-alias:${LINENO} ]: Warning: 'fzf' not in \\\${PATH}\""
    alias  C="echo \"[ .zsh-alias:${LINENO} ]: Warning: 'fzf' not in \\\${PATH}\""
    alias ch="echo \"[ .zsh-alias:${LINENO} ]: Warning: 'fzf' not in \\\${PATH}\""
fi

# Quick-open files with GNU xdg-open or BSD open
function o {
    if command -v xdg-open 1>/dev/null 2>&1; then
        # Freedesktop (probably GNU/Linux) environment: GNU 'xargs' with 'xdg-open'
        if [ "$#" -eq 0 ]; then
            if command -v fzf 1>/dev/null 2>&1; then
                fzf --height=15 --print0 | xargs -r -0 -I"{}" sh -c 'xdg-open "{}" 1>/dev/null 2>&1 &'
            else
                echo "Error: 'fzf' not in \${PATH}"
            fi
        else
            xdg-open "$1" 1>/dev/null 2>&1
        fi
    elif command -v open 1>/dev/null 2>&1; then
        # MacOS/BSD environment: BSD 'xargs' with BSD 'open'
        if [ "$#" -eq 0 ]; then
            if command -v fzf 1>/dev/null 2>&1; then
                fzf --height=15 --print0 | xargs -r -0 -I"{}" sh -c 'open "{}" 1>/dev/null 2>&1 &'
            else
                echo "Error: 'fzf' not in \${PATH}"
            fi
        else
            open "$1" 1>/dev/null 2>&1
        fi
    else
        # No 'xdg-open' or 'open' in $PATH
        echo "[ .zsh-alias:${LINENO} ]: Warning: 'xdg-open/open' not in \${PATH}"
    fi
}

# Open current directory with xdg-open/open
if command -v xdg-open 1>/dev/null 2>&1; then
    # Freedesktop environment: GNU 'xdg-open'
    alias op='xdg-open .'
elif command -v open 1>/dev/null 2>&1; then
    # MacOS environment: BSD 'open'
    alias op='open .'
else
    echo "[ .zsh-alias:${LINENO} ]: Warning: 'xdg-open/open' not in \${PATH}"
fi

# Python3 alias. On certain systems, e.g. Ubuntu, python is not linked to either Python2 nor Python3
if ! command -v python 1>/dev/null 2>&1; then
    alias python='python3'
fi

# On MacOS Darwin: make an alias python->python3
if [ "$(uname -s)" = "Darwin" ]; then
    alias python='python3'
fi

# (i)Python calculator
PYTHON_CALC_INIT_CMD='from math import *; from matplotlib.pyplot import *; from numpy import *; from numpy.fft import *'
if command -v ipython 1>/dev/null 2>&1; then
    # Ipython with Vim keybindings and _without_ QT backend (nice..)
    alias calc="XDG_SESSION_TYPE=X11 ipython --TerminalInteractiveShell.editing_mode=vi -i -c '${PYTHON_CALC_INIT_CMD}'"
else
    # Regular python calculator (lame..)
    echo "[ .zsh-alias:${LINENO} ]: Warning: 'ipython' not in \${PATH}"
    alias calc="python3 -i -c '${PYTHON_CALC_INIT_CMD}'"
fi

